################################################
# Задача 1: Echo Task
################################################
---
# Версия API для Tekton Pipelines
apiVersion: tekton.dev/v1beta1

# Тип ресурса - в данном случае Task
kind: Task

# Метаданные Task
metadata:
  # Уникальное имя Task в пределах кластера
  name: echo

# Спецификация Task
spec:
  # Описание Task
  description: This task will echo the message.

  # Входные параметры для Task
  params:
    # Параметр 'message'
    - name: message
      # Описание параметра 'message'
      description: The message to echo
      # Тип параметра 'message' - строка
      type: string

  # Шаги для выполнения в Task
  steps:
    # Шаг 1: Echo the message
    - name: echo-message
      # Используемый образ контейнера
      image: alpine:3
      # Команда для выполнения в контейнере
      command: [/bin/echo]
      # Аргументы для команды
      args: ["$(params.message)"]


################################################
# Задача 2: Cleanup Task
################################################
---
# Версия API для Tekton Pipelines
apiVersion: tekton.dev/v1beta1

# Тип ресурса - в данном случае Task
kind: Task

# Метаданные Task
metadata:
  # Уникальное имя Task в пределах кластера
  name: cleanup

# Спецификация Task
spec:
  # Описание Task
  description: This task will clean up a workspace by deleting all of the files.

  # Рабочие области, используемые в Task
  workspaces:
    # Рабочая область 'source'
    - name: source

  # Шаги для выполнения в Task
  steps:
    # Шаг 1: Удаление файлов
    - name: remove
      # Используемый образ контейнера
      image: alpine:3
      # Лимиты и запросы на ресурсы
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
      # Переменные среды для контейнера
      env:
        # Установка переменной окружения WORKSPACE_SOURCE_PATH
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      # Рабочий каталог для контейнера
      workingDir: $(workspaces.source.path)
      # Контекст безопасности для контейнера
      securityContext:
        # Запуск контейнера не от имени root
        runAsNonRoot: false
        # Запуск контейнера от имени пользователя с UID 0 (root)
        runAsUser: 0
      # Скрипт для выполнения в контейнере
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Удаление существующего содержимого директории, если она существует.
        #
        # Мы не просто используем "rm -rf ${WORKSPACE_SOURCE_PATH}", потому что ${WORKSPACE_SOURCE_PATH} может быть "/"
        # или корнем примонтированного тома.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          # Удаление не скрытых файлов и директорий
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Удаление файлов и директорий, начинающихся с ".", но исключая ".."
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Удаление файлов и директорий, начинающихся с ".." и любого другого символа
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi


################################################
# Задача 3: Test Task (nosetests)
################################################
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  description: This task will run nosetests on the provided input.
  workspaces:
    # Определение рабочей области 'source', которая будет использоваться для хранения кода
    - name: source
  params:
    # Определение параметра 'args' для передачи аргументов nose
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
    # Определение параметра 'database_uri' для передачи строки подключения к базе данных
    - name: database_uri
      description: Database connection string
      type: string
      default: "sqlite:///test.db"
  steps:
    - name: nosetests
      # Используется образ Python 3.9-slim для выполнения nosetests
      image: python:3.9-slim
      # Установка рабочей директории для контейнера с использованием пути рабочей области 'source'
      workingDir: $(workspaces.source.path)
      env:
        # Установка переменной окружения DATABASE_URI со значением из параметра 'database_uri'
        - name: DATABASE_URI
          value: $(params.database_uri)
      script: |
        #!/bin/bash
        set -e

        echo "***** Installing dependencies *****"
        python -m pip install --upgrade pip wheel
        pip install -qr requirements.txt

        echo "***** Running nosetests with: $(params.args)"
        nosetests $(params.args)